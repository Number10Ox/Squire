//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Scripts/MonoComponents/InputHandling/SquireInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SquireInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SquireInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SquireInputActions"",
    ""maps"": [
        {
            ""name"": ""DungeonMap"",
            ""id"": ""9e81eab6-237d-448c-9a2e-25eeaa3a66e3"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""b742492a-a3d0-49c5-9378-587c41ef2987"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""8109b057-5316-43e1-a44b-e3c393469ee6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pointer Position"",
                    ""type"": ""Value"",
                    ""id"": ""c49cd5e1-7a0b-476a-bfb0-46b7c6c2a1d1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b066778-50ed-49f8-88a6-1e33263ab0a1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""636a4b8f-7474-493a-83cc-e39783f51e04"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc65cdd4-9666-4c4b-aaa7-26e20208e69b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DungeonMap
        m_DungeonMap = asset.FindActionMap("DungeonMap", throwIfNotFound: true);
        m_DungeonMap_Interact = m_DungeonMap.FindAction("Interact", throwIfNotFound: true);
        m_DungeonMap_Scroll = m_DungeonMap.FindAction("Scroll", throwIfNotFound: true);
        m_DungeonMap_PointerPosition = m_DungeonMap.FindAction("Pointer Position", throwIfNotFound: true);
    }

    ~@SquireInputActions()
    {
        UnityEngine.Debug.Assert(!m_DungeonMap.enabled, "This will cause a leak and performance issues, SquireInputActions.DungeonMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DungeonMap
    private readonly InputActionMap m_DungeonMap;
    private List<IDungeonMapActions> m_DungeonMapActionsCallbackInterfaces = new List<IDungeonMapActions>();
    private readonly InputAction m_DungeonMap_Interact;
    private readonly InputAction m_DungeonMap_Scroll;
    private readonly InputAction m_DungeonMap_PointerPosition;
    public struct DungeonMapActions
    {
        private @SquireInputActions m_Wrapper;
        public DungeonMapActions(@SquireInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_DungeonMap_Interact;
        public InputAction @Scroll => m_Wrapper.m_DungeonMap_Scroll;
        public InputAction @PointerPosition => m_Wrapper.m_DungeonMap_PointerPosition;
        public InputActionMap Get() { return m_Wrapper.m_DungeonMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DungeonMapActions set) { return set.Get(); }
        public void AddCallbacks(IDungeonMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DungeonMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DungeonMapActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
        }

        private void UnregisterCallbacks(IDungeonMapActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
        }

        public void RemoveCallbacks(IDungeonMapActions instance)
        {
            if (m_Wrapper.m_DungeonMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDungeonMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DungeonMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DungeonMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DungeonMapActions @DungeonMap => new DungeonMapActions(this);
    public interface IDungeonMapActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
    }
}
